refs: 
https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes
http://rogerdudler.github.io/git-guide/
https://education.github.com/git-cheat-sheet-education.pdf
https://www.atlassian.com/git/tutorials/comparing-workflows/
http://stackoverflow.com/questions/19216411/how-do-i-pull-files-from-remote-without-overwriting-local-files (stash > pull > stash pop)

Workflow
* Remember that the branch you're in dictates what files you see and are working on in file explorer.
* git status, git diff, git reset are all very useful.
* Remember that reset and merge --abort are always available. Also, NEVER push to master ala the end of this workflow unless you're confident
all conflicts are properly saved. If you need to restart, just pull master again, do fetch & merge again, and start over.
* We can't really work on the scene itself at the same time, as there's no good way to merge binary files.
* We can add assets, work on scripts, etc though of course. Anything text or resource-related we can get merged.
checkout (your branch)
pull origin/master (or fetch then merge)
*now you can work. once done with work ->
add -A (or single files)
commit -m "message"
-- now your personal branch is up to date locally
push
-- now your remote is up to date as well
-- now, we need to get all of these changes to the master branch, regardless of if one of us has pushed to it in the meantime. so,
checkout master
git fetch (your branch)
git merge (your branch) (remember you're in master now, so files you see in file explorer are master's files. fix merge conflicts. use the scene merge info below)
git push (when you're sure it's fine!)

To deal with the scene merge conflict, as it will always happen if the scene changes:
git checkout --theirs -- scene_one.unity (will use the scene from other branch, the one you're merging into your current one)
OR
git checkout --ours -- scene_one.unity (will use the scene from the branch you're in)

A bunch of random commands and notes below:

git branch ( make sure you're always in the proper branch ) *******
git checkout (switch branch)

init
remote add origin https://github.com/yourusername/Hello-World.git -- to assign a value to the origin master remote property. 

git remote -v (show the remotes you have stored to be used)
git fetch (origin) (Pull everything you don't have from that repository, branches and all, w/o merging)
pull (origin master) (Pull everything & merge it into your work. Pulls the branch you're in unless specified )
status
reset
clone (if you clone, it sets that respository as origin, so fetch and pull will default use it.)
diff (origin/master or --cached or HEAD) (show all changes that took place since last commit)

To push changes to github:
add (-A for all, -u for modified and deleted w/o new, . for new and modified, w/o deleted)
commit -m "Changes here"
push (origin master) (--all -u to push all branches and set upstream tracking)       

if changes have been made to both local and remote, and you just want to grab the remote branch data
git fetch --all
git reset --hard origin/master

if you KNOW your local contains the correct data and you did your work without pulling (be careful... this should mean you checked
the changes with diff and incorporated them locally, but didn't actually pull them.. be careful)
git push origin master -f



We're all going to have a working branch, and a master branch.







